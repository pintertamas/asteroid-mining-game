class Temporary {
    //-----------------------------
    //ez a mapban volt
    //-----------------------------
    boolean moving, goNorth, goSouth, goEast, goWest;

    /**
     * Ez a függvény felel a mozgásért
     */
    public void handleMouseActions(Group root, Rectangle2D screenBounds) {
        int speed = 30;

        root.getScene().setOnKeyPressed(event -> {
            //System.out.println(event.toString());
            switch (event.getCode()) {
                case UP:
                    goNorth = true;
                    break;
                case DOWN:
                    goSouth = true;
                    break;
                case LEFT:
                    goWest = true;
                    break;
                case RIGHT:
                    goEast = true;
                    break;
                case SHIFT:
                    moving = true;
                    break;
            }
        });

        root.getScene().setOnKeyReleased(event -> {
            switch (event.getCode()) {
                case UP:
                    goNorth = false;
                    break;
                case DOWN:
                    goSouth = false;
                    break;
                case LEFT:
                    goWest = false;
                    break;
                case RIGHT:
                    goEast = false;
                    break;
                case SHIFT:
                    moving = false;
                    break;
            }
        });

        int dx = 0, dy = 0;

        if (goNorth) dy += speed;
        if (goSouth) dy -= speed;
        if (goEast) dx -= speed;
        if (goWest) dx += speed;

        moveAllAsteroids(root, screenBounds, dx, dy);
        drawWholeMap(root, screenBounds);
    }

    /**
     * Felrajzolja az egész térképet
     *
     * @param root
     * @param screenBounds//TODO
     */
    public void drawWholeMap(Group root, Rectangle2D screenBounds) {
        for (Asteroid asteroid : this.asteroids) {
            if (asteroid.getPosition().isInside(screenBounds)) {
                asteroid.refresh(root, screenBounds);
            }
        }
    }

    /**
     * Ez a függvény kapcsolja össze az aszteroidákat, és rajzol közéjük vonalat
     */
    public void connectNeighbors(Group root) {
        ArrayList<Asteroid> alreadyConnected = new ArrayList<>();
        for (Asteroid asteroid : this.asteroids) {
            for (Asteroid neighbor : asteroid.getNeighbors()) {
                if (alreadyConnected.contains(neighbor)) {
                    continue;
                }
                double offset = neighbor.getPosition().getSize() / 2;
                double offset2 = asteroid.getPosition().getSize() / 2;
                Line line = new Line();
                line.setStartX(neighbor.getPosition().getX() + offset);
                line.setStartY(neighbor.getPosition().getY() + offset);
                line.setEndX(asteroid.getPosition().getX() + offset2);
                line.setEndY(asteroid.getPosition().getY() + offset2);
                line.setStroke(Color.WHITE);
                root.getChildren().add(line);
            }
            alreadyConnected.add(asteroid);
        }
    }


    /**
     * Elmozgat egy irányban minden aszteroidát
     */
    public void moveAllAsteroids(Group root, Rectangle2D screenBounds, float x, float y) {
        for (Asteroid a : asteroids) {
            a.updatePosition(x, y);
            a.refresh(root, screenBounds);
        }
    }

    //----------------------------------------
    // ez az aszteroidában volt
    //----------------------------------------

    /**
     * Ez a függvény az aszeroida állapota alapján visszaad egy image-t
     */
    public String getImage() {
        if (this.layers > 0)
            return "asteroids/rock.png";
        if (this.isHollow)
            return "/asteroids/hollow.png";
        else return this.material.getImagePath();
    }

    /**
     * Ez a függvény rajzolja ki az aszteroidákat
     *
     * @param root
     * @param screenBounds
     */
    public void draw(Group root, Rectangle2D screenBounds) {
        if (getPosition().isInside(screenBounds)) {
            String img = getImage();
            ImageView imageView = DrawFunctions.image(img, this.position.getSize());
            imageView.setX(this.position.getX());
            imageView.setY(this.position.getY());
            root.getChildren().add(imageView);
        }
    }

    /**
     * Ez a függvény frissíti a portálokat és figurákat
     *
     * @param root
     * @param screenBounds
     */
    public void refresh(Group root, Rectangle2D screenBounds) {
        this.draw(root, screenBounds);
        for (Portal portal : this.portals)
            portal.draw(root, screenBounds);
        for (Figure figure : this.figures)
            figure.draw(root, screenBounds);
    }

    //--------------------------
    //settlerben volt
    //--------------------------

    private void drawSettlerInfo(VBox vBox) {
        GridPane grid = new GridPane();
        grid.setHgap(20);
        grid.setVgap(20);
        grid.setBackground(new Background(new BackgroundFill(Color.GAINSBORO, new CornerRadii(100), Insets.EMPTY)));
        grid.setAlignment(Pos.CENTER);
        grid.setPadding(new Insets(10, 10, 10, 10));
        Text text = DrawFunctions.text("Current settler:\n" + this, 15);
        grid.getChildren().add(text);
        vBox.getChildren().add(grid);
    }

    private void drawInventory(VBox vBox, Rectangle2D screenBounds) {
        GridPane grid = new GridPane();
        grid.setHgap(20);
        grid.setVgap(20);
        grid.setBackground(new Background(new BackgroundFill(Color.GAINSBORO, new CornerRadii(100), Insets.EMPTY)));
        grid.setAlignment(Pos.CENTER);
        Text text = DrawFunctions.text("\nInventory\n", 15);
        grid.getChildren().add(text);
        vBox.getChildren().add(grid);

        FlowPane inventory = new FlowPane();
        inventory.setAlignment(Pos.CENTER);
        inventory.setBackground(new Background(new BackgroundFill(Color.GAINSBORO, new CornerRadii(30.0), Insets.EMPTY)));
        for (Material material : this.inventory.getMaterials()) {
            double imgSize = screenBounds.getWidth() / 30;
            ImageView imageView = DrawFunctions.image(material.getImagePath(), imgSize);
            inventory.getChildren().add(imageView);
        }
        vBox.getChildren().add(inventory);
    }

    /**
     * Ez a függvény rajzolja ki a settler inventoryjában található portálokat
     *
     * @param vBox
     */
    private void drawPortals(VBox vBox) {
        HBox portalBox = new HBox(20);
        portalBox.setAlignment(Pos.CENTER);
        portalBox.setBackground(new Background(new BackgroundFill(Color.GAINSBORO, new CornerRadii(100), Insets.EMPTY)));

        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(20);
        grid.setAlignment(Pos.CENTER);
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setBackground(new Background(new BackgroundFill(Color.GAINSBORO, new CornerRadii(100), Insets.EMPTY)));

        ImageView portalImage = DrawFunctions.image("/portal.png", 100);
        portalBox.getChildren().add(portalImage);

        Text text = DrawFunctions.text("No. Portals: " + this.inventory.getPortals().size(), 20);
        portalBox.getChildren().add(text);

        grid.getChildren().add(portalBox);
        vBox.getChildren().add(grid);
    }

    /**
     * Ez a függvény rajzolja ki a buttonoket amikre kattintva akciókat tudunk elindítani
     *
     * @param vBox
     * @param screenBounds
     */
    private void drawActions(VBox vBox, Rectangle2D screenBounds) {
        FlowPane actions = new FlowPane();
        actions.setHgap(10);
        actions.setAlignment(Pos.CENTER);
        actions.setBackground(new Background(new BackgroundFill(Color.GAINSBORO, new CornerRadii(70.0), Insets.EMPTY)));

        String[] moves = {"Move", "MoveThroughPortal"};
        Button btn = new Button();
        btn.setText("asd");
        vBox.addEventHandler(EventType.ROOT, event -> {
            System.out.println("asd");
        });
    }

    /**
     * Ez a függvény hívja meg a a portálok és akciók kirajzolását
     *
     * @param vBox
     * @param screenBounds
     */
    private void drawPortalsAndActions(VBox vBox, Rectangle2D screenBounds) {
        drawPortals(vBox);
        drawActions(vBox, screenBounds);
    }

    /**
     * Ez a függvény rajzolja ki az settler aszteroidájának az információit
     *
     * @param vBox
     * @param screenBounds
     */
    private void drawAsteroidDetails(VBox vBox, Rectangle2D screenBounds) {
        HBox detailContainer = new HBox(20);
        detailContainer.setBackground(new Background(new BackgroundFill(Color.GAINSBORO, new CornerRadii(50.0), Insets.EMPTY)));

        double imgSize = screenBounds.getWidth() / 10;
        try {
            String imgPath = this.getAsteroid().getImage(); //TODO random exceptiont dob ha sokáig fut a játék
            ImageView imageView = DrawFunctions.image(imgPath, imgSize);
            detailContainer.getChildren().add(imageView);
        } catch (Exception e) {
            e.printStackTrace();
        }

        VBox details = new VBox(10);
        details.setAlignment(Pos.CENTER_LEFT);
        Text asteroidName = DrawFunctions.text("Asteroid ID:\n" + this.getAsteroid().toString().replace("Playground.Asteroid@", ""), 15);
        Text asteroidLayers = DrawFunctions.text("Layers: " + this.getAsteroid().getLayers(), 15);
        Text asteroidCore = DrawFunctions.text("Material:\n" + this.getAsteroid().getMaterial().toString().replace("Materials.", ""), 15);

        details.getChildren().addAll(asteroidName, asteroidLayers, asteroidCore);

        detailContainer.getChildren().add(details);

        vBox.getChildren().add(detailContainer);
    }

    /**
     * Kirajzolja a telepes inventoriját, lehetséges lépéseit és az aszteroidájának az adatait
     *
     * @param root
     * @param screenBounds
     */
    public void drawGUI(Group root, Rectangle2D screenBounds) {
        double width = 2 * screenBounds.getWidth() / 9;
        double height = screenBounds.getHeight();
        double posX = 7 * screenBounds.getWidth() / 9;
        double posY = 0;

        VBox mainContainer = new VBox(20);
        mainContainer.setAlignment(Pos.CENTER);
        mainContainer.setLayoutX(posX);
        mainContainer.setLayoutY(posY);
        mainContainer.setPrefWidth(width);
        mainContainer.setPrefHeight(height);
        mainContainer.setBackground(new Background(new BackgroundFill(Color.rgb(100, 100, 100), CornerRadii.EMPTY, Insets.EMPTY)));

        drawSettlerInfo(mainContainer);
        drawInventory(mainContainer, screenBounds);
        drawPortalsAndActions(mainContainer, screenBounds);
        drawAsteroidDetails(mainContainer, screenBounds);

        mainContainer.setPadding(new Insets(10, 10, 10, 10));

        root.getChildren().add(mainContainer);
    }

//**************************
    //gameben
//---------------------------

    /**
     * Ez a függvény rajzolja ki a játék hátterét (background.png)
     *
     * @param gc
     * @param screenBounds
     */
    public void drawBackground(GraphicsContext gc, Rectangle2D screenBounds) {
        Image image = new Image("/background.png");
        gc.drawImage(image, 0, 0);
    }


//-----------------------------
    //mainben
//-----------------------------

    Rectangle2D screenBounds = Screen.getPrimary().getBounds();
        System.out.println(screenBounds);
    double screenWidth = screenBounds.getWidth();
    double screenHeight = screenBounds.getHeight();
        primaryStage.setX(screenBounds.getMinX());
        primaryStage.setY(screenBounds.getMinY());
        primaryStage.setWidth(screenWidth);
        primaryStage.setHeight(screenHeight);
    Group root = new Group();
    Canvas canvas = new Canvas(screenWidth, screenHeight);
        root.getChildren().

    add(canvas);

    Scene scene = new Scene(root);
        primaryStage.setTitle("Asteroid Mining Controllers.Game");
        primaryStage.setScene(scene);
        primaryStage.setResizable(false);
        primaryStage.show();
        scene.getStylesheets().

    add("style.css");
        root.getStylesheets().

    addAll("style.css");

    GraphicsContext gc = canvas.getGraphicsContext2D();
    Game game = new Game();
        game.run(root,gc,screenBounds,new

    Map());
}
